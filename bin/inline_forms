#!/usr/bin/env ruby
module InlineForms
  require File.join(File.dirname(__FILE__), "../lib/inline_forms/version.rb")

  # what is this?
  Signal.trap("INT") { puts; exit }

  require 'thor'
  class Creator < Thor
    include Thor::Actions

    def self.source_root
      File.dirname(__FILE__)+"/.."
    end
    desc "create APP", "create an application with inline_forms v#{VERSION}"
    DATABASE_OPTIONS = %w(sqlite mysql)
    method_option :database, :aliases => "-d", :default => DATABASE_OPTIONS.first, :banner => DATABASE_OPTIONS.join('|'), :desc => 'specify development database'
    # TODO ROYTJE specify sqlite OR mysql, and if none is specified, ASK THE USER.
   
    method_option :dry, :type => :boolean, :desc => 'dry run. Do not do most things. Only useful for development of inline_forms'
    # TODO ROYTJE Remove ALL dry run code. We don't do dry runs anymore.
    method_option :example, :type => :boolean, :desc => 'install the example app. incompatible with --dry and uses sqlite as development database'
    method_option :email, :aliases => "-e", :default => "admin@example.com", :desc => 'specify admin email'
    method_option :password, :aliases => "-p", :default => "admin999", :desc => 'specify admin password'
    method_option :runtest, :aliases => "\-\-run-test", :default => false, :desc => 'run tests'
    method_option :skiprvm, :aliases => "\-\-no-rvm", :type => :boolean, :default => false, :desc => 'install inline_forms without RVM'

    def create(app_name)
      def self.skiprvm
        options[:skiprvm]
      end

      def self.runtest
        options[:runtest]
      end

      def self.dry_run?
        options[:dry]
      end

      def self.install_example?
        options[:example]
      end

      def self.database
        DATABASE_OPTIONS.include?(options[:database]) ? options[:database] : 'sqlite'
      end
      
      def self.using_sqlite?
        database == 'sqlite'
      end

      def self.email
        options[:email]
      end

      def self.password
        options[:password]
      end

      if install_example? && dry_run?
        say "--example and --dry-run can not be used together", :red
        exit 1
      end

      if install_example? && !using_sqlite?
        say "--example can only be used with an sqlite development database", :red
        exit 1
      end

      say "This is a dry run. I hope you know what you are doing...", :red if dry_run?

      say "Creating #{app_name} with inline_forms v#{VERSION} and development database #{database}...", :green

      regex = /\A[0-9a-zA-Z][0-9a-zA-Z_-]+[0-9a-zA-Z]\Z/
      if ! regex.match(app_name)
        say "Error: APP must match #{regex.source}", :red
        exit 1
      end

      if File.exists?(app_name)
        say "Error: APP exists", :red
        exit 1
      end

      # TODO: optioneel, detecteren dat er RVM er is als het niet zo is dan zonder RVM instaleren
      # Maybe via the method.options (THOR)?? 
      # using_rvm = false # for testing purpose only need to do this another way.
      require 'rvm'
      # if RVM is detected and the user has not disabled using rvm via command than use rvm else without
      if RVM.current && !options[:skiprvm]
        # Let the user know that he are installing the inline_forms with support of RVM
        say "Installing inline_forms with RVM", :green
        # which ruby version is currently activated?
        ruby_version = (%x[rvm current]).gsub(/@.*/,'')
        # Create a ruby rvm-file version based on the version detected
        create_file "#{app_name}/.ruby-version", ruby_version
        # Creat a ruby-gemset rvm-file based on the version detected 
        create_file "#{app_name}/.ruby-gemset", app_name
      else
        # Let the user know that he is installing inline_forms without RVM
        say "Installing inline_forms without RVM", :green
      end

      if dry_run?
        empty_directory(app_name)
      else
        empty_directory(app_name)
        
        # need to pass all agruments for app template
        options.each do | k,v | 
          ENV[k] = v.to_s
        end
        ENV['using_sqlite'] = using_sqlite?.to_s
        ENV['install_example'] = install_example?.to_s
        ENV['ruby_version'] = ruby_version

				app_template_file = File.join(File.dirname(__FILE__), 'inline_forms_app_template.rb')

        if ! run("rails _3.2.12_ new #{app_name} -m #{app_template_file} --skip-bundle --skip-gemfile --skip-test-unit")
          say "Rails could not create the app '#{app_name}', maybe because it is a reserved word...", :red # TODO ROYTJE MAKE ERROR MESSAGE MORE RELEVANT # Rails could not create the app 'MyApp', maybe because it is a reserved word..
          exit 1
        end
      end
    end
    Creator.start
  end
end